
<h1 id="id_add">test</h1>

<script>

    var data = [10,2,5,1,3,4,8,7,6,9];

    function quickSort(data,start,end){

        var key = start;
        var i = start + 1;
        var j = end;
        var temp;

        if(start >= end){ // 원소가 1개인 경우 반환
            return;
        }

        while(i <= j){ // 키값인 첫번째 배열 요소 10 다음 값인 두번째 배열요소 8 부터 좌측 시작 지점과 우측 시작 지점이 만날때까지 반복

            while(data[i] >= data[key] && i <= end){// 키값보다 큰수를 만날때까지 좌측에서 우측으로 이동
                i++;
            }
            while(data[j] <= data[key] && j > start){// 키값보다 작은수를 만날때까지 우측에서 좌측으로 이동
                j--;
            }

            if(i >= j){ // 좌측 체크와 우측 체크가 서로 지나서 크로스 된 경우 우측 체크 값(키 값보다 작은 값)과 키값을 교환
                temp = data[j];
                data[j] = data[key];
                data[key] = temp;
            }else{ // 키 값과 우측 체크 값
                temp = data[j];
                data[j] = data[i];
                data[i] = temp;
            }

            quickSort(data,start,j - 1); //j 값을 기준으로 왼쪽 분할 연산
            quickSort(data,j + 1,end); //j 값을 기준으로 오른쪽 분할 연산

        }

    }

    function insertionSort(data){

        data = String(data).split("");

        var i,j,temp;
        var ret_num = '';
        
        for (i = 0; i < data.length - 1; i++) { //배열 처음부터 끝까지
            
            j = i;
            while(data[j] < data[j + 1]){
                temp = data[j];
                data[j] = data[j + 1];
                data[j + 1] = temp;
                j--;
            }
        }

        for (i = 0; i < data.length; i++) { //배열 처음부터 끝까지
            
            ret_num += data[i];
        }
        
        return parseFloat(ret_num);

    }

    function heapSort(heap){

        console.log(heap);

        //힙 트리 구성 부모 노드의 값이 자식 노드의 값 보다 커야 함
        function heapfiy(heap){

            for (var i = 0; i < heap.length; i++) { 
                // 이진 트리 구조는 최상위 노드 부터 하위 노드로 배열의 인덱스 0 부터 시작함
                //console.log(heap[i]);
                var c = i;

                var root = Math.floor((c - 1) / 2); // 현재 노드의 부모 노드 인덱스 구하기

                if(heap[root] < heap[c]){
                    //console.log("1root:" + heap[root] + ", c:" + heap[c]);
                    var temp = heap[root];
                    heap[root] = heap[c];
                    heap[c] = temp;
                    //console.log("2root:" + heap[root] + ", c:" + heap[c]);
                    c = root;
                }
            }
        }

        heapfiy(heap);// 처음 시작 시 힙 트리 구성

        for (var i = heap.length - 1; i >= 0; i--) { 
            // 힙 트리 구성 하면 최상위 노드가 제일 큰 숫자가 되므로 트리 구성 후 제일 마지막 노드와 최상위 노드를 교환 후
            // 나머지 값들을 다시 힙트리로 구성 하고 연산 반복
            var temp = heap[0];
            heap[0] = heap[i];
            heap[i] = temp;
            var root = 0;
            var c = 1;

            if(heap[root] < heap[c]){
            
            }

        }

        console.log(heap);



    }

    function show(data){
        var text = "";
        for (let index = 0; index < data.length; index++) {
            var element = data[index];
            console.log(element);
            text += "<h1>" + element + "</h1>";
        }
        document.querySelector('#id_add').innerHTML = text;

    }

    //quickSort(data,0,data.length - 1);
    var ret_data = insertionSort(5384);
    heapSort(data);
    //console.log(ret_data);
    //show(data);

</script>
